import java.util.Scanner;
import java.util.HashMap;
import java.util.List;
import java.util.Arrays;

public class cyoa {
    String q, aiq; // Question, AfterIncorrectQuestion
    Boolean qii, ifq; // qIsInt
    String[] c, pac, b; // Choices, PositionAfterChoice, Benifits

    // Setup New Story Data
    public void setup(String Question, Boolean qIsInt, Boolean isFinalQuestion, String AfterIncorrectQuestion, String[] Choices, String[] PositionAfterChoice, String[] Benifits) {
        // Question: Question to be printed to console asking player
        // qIsNum: Is the question an interger
        // isFinalQuestion: Is the question a final one? Basically it will end the game when achieved
        // AfterIncorrectQuestion: When user doesn't choose an answer within choices
        // will give you this question instead, to make the question more direct
        // Choices: Possible choices; If an int then give lower bound and upper bound as a string
        // PositionAfterChoice: Depending on choice, where to take the user next
        // Benifits: User Recieves; Can be declared as 'null' if none

        q = Question;
        qii = qIsInt;
        ifq = isFinalQuestion;
        aiq = AfterIncorrectQuestion;
        c = Choices;
        pac = PositionAfterChoice;
        b = Benifits;
    }

    static Boolean isint(String value) { // If all characters in string are digits then return true else false
        boolean isInt = value.chars().allMatch(Character::isDigit); 
        return isInt;
    }

    static Object askQuestion(String Question, Boolean qIsInt, String AfterIncorrectQuestion, String[] Choices) {
        Scanner keyboard = new Scanner(System.in);

        System.out.print(Question);
        String choice = keyboard.nextLine();
        List choicesList = Arrays.asList(Choices); // Convert Choices To List
        Boolean successful = false;
        if (qIsInt) { // If question is asking for an interger
            while (!successful) {
                if (!isint(choice)) { // Make sure it is an interger
                    System.out.print("Invalid input, I need a positive integer! ");
                    successful = false;
                } else {
                    if (Integer.parseInt(choice) >= Integer.parseInt(Choices[0]) && Integer.parseInt(choice) <= Integer.parseInt(Choices[1])) { // Converts String to int then checks if in range
                        successful = true;
                    } else {
                        System.out.print(AfterIncorrectQuestion);
                        successful = false;
                    }
                }
                if (!successful) {
                    choice = keyboard.nextLine();
                }
            }
         } else { // If question is asking for string
            while (!choicesList.contains(choice)) { // If the given choice is in the available choices
                System.out.print(AfterIncorrectQuestion);
                choice = keyboard.nextLine();
            }
         }

        //keyboard.close(); // Prevent Error Line
        return choice;
    }

    public static void main(String[] args) {
        // Compiler; New Object Seperated by '~'; New Question Seperated by '`', Choices Are Created Using ,: 
        // Name~Question: ~Question Is Interger~Question Is A Final Question~Question After Incorrect Input: ~Number Range/Choices~Position After Choice In Order Of Choices~Benifit After Question 
        // Benifits Are Written BenifitName, Value (ONLY ONE), Write Index In Benifits, Addition
        String story = "Starting~Give me a number between 1-10: ~true~true~NO! A number between 1 and 10: ~1,10~true~1, 0";
        
        // Write Benifits Here (ONLY INTERGERS)
        // Nonben
        int[] benifits = {0};

        // Compile Story:
        HashMap<String, cyoa> storyData = new HashMap<String, cyoa>();
        String[] questions = story.split("`");
        for (int question = 0; question < questions.length; question++) {
            String[] i = questions[question].split("~");
            cyoa newQuestion = new cyoa();
            String Name = i[0];
            String Question = i[1];
            Boolean qIsInt = Boolean.parseBoolean(i[2]);
            Boolean isFinalQuestion = Boolean.parseBoolean(i[3]);
            String AfterIncorrectQuestion = i[4];
            String[] Choices = i[5].split(",");
            String[] PositionAfterChoice = i[6].split(",");
            String[] Benifits = i[7].split(",");
            
            newQuestion.setup(Question, qIsInt, isFinalQuestion, AfterIncorrectQuestion, Choices, PositionAfterChoice, Benifits);
            storyData.put(Name, newQuestion);
        }

        // Run Story
        Boolean isRunning = true;
        Object currentQuestion = "Starting";
        while (isRunning) {
            System.out.println(isRunning);
            Object choice = askQuestion(storyData.get(currentQuestion).q, storyData.get(currentQuestion).qii, storyData.get(currentQuestion).aiq, storyData.get(currentQuestion).c);
            if (storyData.get(currentQuestion).ifq) {
                isRunning = false;
            } else {
                currentQuestion = choice;
            }
        }  
    }
}

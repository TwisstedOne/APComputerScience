// Main
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
// Art
import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Image;
import java.awt.Graphics2D;
import javax.swing.SwingUtilities;

import javafx.geometry.Dimension2D;
import javafx.scene.shape.Polygon;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class houseproject extends JPanel { // I took to much time making this
    // Constants
    static final int updateLength = 1; // Smoother the faster

        // Orbit
    static boolean doDaylightCycle = true;
    static final int orbitSpeed = 2000; // Slower the more
    static final int orbitSize = 900;
    static final int orbitMax = (int)(Math.abs((int)(Math.cos(Math.PI) * orbitSize))/1.5);

        // Stars
    static final int numberOfStars = 200;

        // Clouds
    static boolean cloudsOn = false; // Not Final because code no likey
    static final int numberOfClouds = 10;
    static final int cloudThickness = 20;
    static final int cloudSpreadX = 300;
    static final int cloudSpreadY = 150;

    // Positions
    static int sunPositionX = orbitMax;
    static int sunPositionY = orbitMax;
    static int moonPositionX = 0;
    static int moonPositionY = 0;
    static int[][] starPositions = new int[3][numberOfStars + 1];
    static int[][][] cloudPositions = new int[5][numberOfClouds + 1][cloudThickness + 1]; // [posX, posY, sizeX, sizeY, z][index][cloudIndex]
    static double dt = 0;

    static void sleep(int miliseconds) {
        try {
            Thread.sleep(miliseconds);
          } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
          }
    }

    static int randomInt(int lower) {
        Random random = new Random();
        return random.nextInt(lower);
    }

    public void setColor(Graphics graphics, int r, int g, int b) {
        Color customColor = new Color(r, g, b);
        graphics.setColor(customColor);
    }

    public int boundColor(int value) {
        int bounded;
        if (value < 0) {
            bounded = 0;
        } else if (value > 255) {
            bounded = 255;
        } else {
            bounded = value;
        }
        return bounded;
    }

    public float bound(float value, float toBound) {
        float bounded;
        if (value < 0) {
            bounded = 0;
        } else if (value > toBound) {
            bounded = toBound;
        } else {
            bounded = value;
        }
        return bounded;
    }

    public void drawClouds(Graphics2D g, int width) {
        g.setColor(Color.WHITE);
        AlphaComposite alcom = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, bound(-sunPositionY/10 * .001f, .5f));
        g.setComposite(alcom);
        for (int cloud = 0; cloud < numberOfClouds; cloud++) {
            for (int icloud = 0; icloud < cloudThickness; icloud++) {
                cloudPositions[0][cloud][icloud] += 1;
                g.fillOval(cloudPositions[0][cloud][icloud], cloudPositions[1][cloud][icloud], cloudPositions[2][cloud][icloud], cloudPositions[3][cloud][icloud]);
                if (cloudPositions[0][cloud][icloud] > width + 100) {
                    cloudPositions[0][cloud][icloud] = -100;
                }
            }
        }
    }

    public void drawWindow(Graphics g, double ratio, int x, int y) {
        setColor(g, 121,112,77);
        g.fillRect(x, y, (int)(32 * ratio), (int)(40 * ratio));// Outer Frame
        setColor(g, 51,54,36);
        g.fillRect(x + 2, y + 2, (int)(30 * ratio) + 1, (int)(38 * ratio) + 1);// Inner Frame
        setColor(g, 48,114,113); // Make Lights Randommly Lit
        g.fillRect(x + 4, y + 4, (int)(14 * ratio), (int)(18 * ratio)); // Outer Windows
        g.fillRect(x + 6 + (int)(14 * ratio), y + 4, (int)(14 * ratio), (int)(18 * ratio));
        g.fillRect(x + 4, y + 6 + (int)(18 * ratio), (int)(14 * ratio), (int)(18 * ratio));
        g.fillRect(x + 6 + (int)(14 * ratio), y + 6 + (int)(18 * ratio), (int)(14 * ratio), (int)(18 * ratio));
    }

    public void drawOvalWindow(Graphics g, double ratio, int x, int y) {
        setColor(g, 121,112,77);
        g.fillOval(x, y, (int)(30 * ratio), (int)(30 * ratio));// Outer Frame
        setColor(g, 51,54,36);
        g.fillOval(x + 2, y + 2, (int)(28 * ratio) + 1, (int)(28 * ratio) + 1);// Inner Frame
        if (sunPositionY < 0) {
            setColor(g, 48,114,113);
        } else {
            setColor(g, 255, 242, 0);
        }
        g.fillArc(x + 9, y + 5, (int)(24 * ratio), (int)(24 * ratio), 0, 90);
        g.fillArc(x + 5, y + 5, (int)(24 * ratio), (int)(24 * ratio), 90, 90);
        g.fillArc(x + 5, y + 9, (int)(24 * ratio), (int)(24 * ratio), 180, 90);
        g.fillArc(x + 9, y + 9, (int)(24 * ratio), (int)(24 * ratio), 270, 90);
    }

    public void fillPointByCenter(Graphics g, int x1, int y1, int x2, int y2, String filltype) {
        int finalX1 = x1 - x2/2;
        int finalY1 = y1 - y2/2;

        if (filltype == "oval") {
            g.fillOval(finalX1, finalY1, x2, y2);
        } else if (filltype == "rect") {
            g.fillRect(finalX1, finalY1, x2, y2);
        }
    }

    public void drawTriangle(Graphics g, int x1, int y1, int x2, int y2, int x3, int y3) {
        int[] xpoints = {x1, x2, x3};
        int[] ypoints = {y1, y2, y3};
        g.fillPolygon(xpoints, ypoints, 3);
    }

    public void easyPolygon(Graphics g, int[] points) { // Enter Points As Ordered Pairs
        int[] xpoints = new int[points.length/2];
        int[] ypoints = new int[points.length/2];
        for (int point = 0; point < points.length; point++) { 
            if (point%2 == 0) {
                xpoints[point/2] = points[point];
            }  else {
                ypoints[point/2] = points[point];
            }
        }
        g.fillPolygon(xpoints, ypoints, points.length/2);
    }


    public void paintComponent(Graphics g) {
        //drawline(start x, start y, end x, end y)
        //setColor(Color.COLOR)
        //drawString("what you want to say", starting x, start y)

        // Initalize Variables
        final int width = getSize().width;
        final int height = getSize().height;
        final double ratio = 2.5; // Built in 2.5
        Graphics2D g2d = (Graphics2D) g.create();

        // Backgdrop
    
        setColor(g, boundColor(90/2 + -sunPositionY/(orbitMax/(90/2))), boundColor(185/2 + -sunPositionY/(orbitMax/(185/2))), boundColor(209/2 + -sunPositionY/(orbitMax/(209/2))));  // Background (numbers are the r, g, b values)
        g.fillRect(0, 0, width, height);
        
        
        // Sun, Moon and Stars
        if (sunPositionY > 0) {
            for (int star = 0; star < numberOfStars; star++) {
                g2d.setColor(Color.WHITE);
                AlphaComposite alcom = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, bound(sunPositionY/10 * Math.abs(starPositions[1][star] - height)/100 * .001f, 1));
                g2d.setComposite(alcom);
                fillPointByCenter(g2d, starPositions[0][star], starPositions[1][star],  starPositions[2][star], starPositions[2][star], "oval"); // Stars
            }
        }

        for (int ring = 0; ring < 8; ring++) { // Ring
            setColor(g2d, 240, 218, 19); // Sun Deeper Color
            AlphaComposite alcom = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ring *.1f);
            g2d.setComposite(alcom);
            fillPointByCenter(g2d, width/2 + sunPositionX, height + sunPositionY, 180 - ring * 10, 180 - ring * 10, "oval"); // Sun Outline
        }
        setColor(g, 255, 231, 13); // Sun Color
        fillPointByCenter(g, width/2 + sunPositionX, height + sunPositionY, 100, 100, "oval"); // Sun

        for (int ring = 0; ring < 4; ring++) { // Ring
            setColor(g2d, 225, 225, 225); // Moon Darker Color
            AlphaComposite alcom = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, ring *.1f);
            g2d.setComposite(alcom);
            fillPointByCenter(g2d, width/2 + moonPositionX, height + moonPositionY, 140 - ring * 10, 140 - ring * 10, "oval"); // Sun Outline
        }
        setColor(g, 255, 255, 255); // Moon Color
        fillPointByCenter(g, width/2 + moonPositionX, height + moonPositionY, 100, 100, "oval"); // Moon


        // Scenery



        // Clouds (Turn off to reduce lag)
        if (sunPositionY < 0 && cloudsOn) {
            drawClouds(g2d, width);
        }

        // Actual House
        // Ground
        for (int i = 0; i < 100; i++) {
            //setColor(g, 41 + i, 154 + i, 10 + i);
            setColor(g, 141 - i, 244 - i, 110 - i);
            fillPointByCenter(g, width/2, height - (i * 3), width, 4, "rect");
        }

        setColor(g, 209,227,182); // House Color
        g.fillRect(835, 298, (int)(205 * ratio), (int)(215 * ratio)); // Main
        g.fillRect(800, 650, (int)(215 * ratio), (int)(74 * ratio)); // Extension

        setColor(g, 110,153,121); // Shadow Color, DYNAMIC SHADING?????
        g.fillRect(835, 298, (int)(205 * ratio), (int)(9 * ratio)); // Top Roof
        g.fillRect(800, 650, (int)(105 * ratio), (int)(6 * ratio)); // Roof Left X
        g.fillRect(800 - (int)(10 * ratio) + (int)(105 * ratio), 650 - (int)(10 * ratio), (int)(7 * ratio), (int)(84 * ratio)); // Roof Left Y 


        // SMOKE
        

        setColor(g, 218,55,35); // Roof Color
        easyPolygon(g, new int[] {835 - (int)(21 * ratio), 298, 835 + 10, 298 - (int)(30 * ratio), 835 + (int)(205 * ratio) - 10, 298 - (int)(30 * ratio), 835 + (int)(205 * ratio) + (int)(21 * ratio), 298}); // Roof Top
        setColor(g, 221,150,46);
        g.fillRect(835 + (int)(205 * ratio) - 80, 298 - (int)(30 * ratio) - 30, 60, 30);
        g.fillRect(835 + (int)(205 * ratio) - 90, 298 - (int)(30 * ratio) - 45, 80, 15);
        setColor(g, 155,112,59);
        g.fillRect(835 + (int)(205 * ratio) - 80, 298 - (int)(30 * ratio) - 30, 60, 10);
        
        setColor(g, 255,243,208); 
        g.fillRect(835 - (int)(21 * ratio), 298, (int)(205 * ratio) + 2 * (int)(21 * ratio), 5); // Top Fascia
        setColor(g, 218,55,35);
        easyPolygon(g, new int[] {800 - (int)(10 * ratio), 650, 800 + (int)(45 * ratio), 650 - (int)(50 * ratio), 800 + (int)(45 * ratio) + (int)(95 * ratio), 650 - (int)(50 * ratio), 800 + (int)(95 * ratio), 650}); // Roof Left
        setColor(g, 209,227,182);
        g.fillRect(800 + (int)(100 * ratio), 650 - (int)(35 * ratio), (int)(119 * ratio), (int)(109 * ratio)); // Facade
        drawTriangle(g, 800 + (int)(100 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(95 * ratio), 800 + (int)(219 * ratio), 650 - (int)(35 * ratio));
        setColor(g, 141,31,12); // Roof Right Color
        easyPolygon(g, new int[] {800 + (int)(90 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(105 * ratio), 800 + (int)(229 * ratio), 650 - (int)(35 * ratio), 800 + (int)(223 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(99 * ratio), 800 + (int)(96 * ratio), 650 - (int)(35 * ratio)}); // Roof Right
        setColor(g, 255,243,208); 
        easyPolygon(g, new int[] {800 + (int)(96 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(99 * ratio), 800 + (int)(223 * ratio), 650 - (int)(35 * ratio), 800 + (int)(220 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(94 * ratio), 800 + (int)(100 * ratio), 650 - (int)(35 * ratio)}); // Roof Right Fascia
        setColor(g, 110,153,121);
        easyPolygon(g, new int[] {800 + (int)(100 * ratio), 650 - (int)(35 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(94 * ratio), 800 + (int)(219 * ratio), 650 - (int)(35 * ratio), 800 + (int)(219 * ratio), 650 - (int)(23 * ratio), (800 + (int)(319/2 * ratio)), 650 - (int)(82 * ratio), 800 + (int)(100 * ratio), 650 - (int)(23 * ratio)}); // Roof Right Shadow
        g.fillRect((900 + (int)(319/4 * ratio)), 650, (int)(219 * 3/8 * ratio), (int)(74 * ratio));
        g.fillArc((900 + (int)(319/4 * ratio)), 575, (int)(219 * 3/8 * ratio), 150, 0, 180);
        setColor(g, 177,190,140);
        g.fillRect((920 + (int)(319/4 * ratio)), 650, (int)(179 * 3/8 * ratio), (int)(74 * ratio));
        g.fillArc((920 + (int)(319/4 * ratio)), 595, (int)(179 * 3/8 * ratio), 115, 0, 180);
        setColor(g, 119,88,51);
        g.fillRect((890 + (int)(319/4 * ratio)), 810, (int)(239 * 3/8 * ratio), (int)(10 * ratio));
        
        // Windows Function Origin (x, y)
        drawWindow(g, ratio, 875, 360);
        drawWindow(g, ratio, 995, 360);
        drawWindow(g, ratio, 830, 700);
        drawWindow(g, ratio, 940, 700);

        drawOvalWindow(g, ratio, 1160, 475);

        setColor(g, 78,59,33);
        fillPointByCenter(g, (800 + (int)(319/2 * ratio)), 725, 110, 170, "rect"); // Door Frame
        setColor(g, 203,143,81);
        fillPointByCenter(g, (800 + (int)(319/2 * ratio)), 729, 94, 161, "rect"); // Inner Door
        setColor(g, 179,127,70);
        fillPointByCenter(g, (800 + (int)(319/2 * ratio)), 725 - 170/4, 78, 152/4, "rect"); // Pannels
        fillPointByCenter(g, (800 + (int)(319/2 * ratio)), 725 + 170/4, 78, 152/4, "rect");
        setColor(g, 95,30,0);
        fillPointByCenter(g, (765 + (int)(319/2 * ratio)), 725, 15, 15, "oval"); // Knob
        setColor(g, 102, 107, 105);
        easyPolygon(g, new int[] {(890 + (int)(319/4 * ratio)), 810 + (int)(10 * ratio), (890 + (int)(319/4 * ratio)) + (int)(239 * 3/8 * ratio), 810 + (int)(10 * ratio), (930 + (int)(319/4 * ratio)) + (int)(239 * 3/8 * ratio), height, 850 + (int)(319/4 * ratio), height});
    }

    public static void main(String[] args) {
        final houseproject panel = new houseproject();

        final JFrame frame = new JFrame("House Project");

        frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        frame.setVisible(true);

        // Initalization Values
        final int width = frame.getSize().width;
        final int height = frame.getSize().height;

            // Stars
        for (int star = 0; star < numberOfStars; star++) { starPositions[0][star] = randomInt(width); }
        for (int star = 0; star < numberOfStars; star++) { starPositions[1][star] = randomInt(height); }
        for (int star = 0; star < numberOfStars; star++) { starPositions[2][star] = randomInt(10); }
        for (int cloud = 0; cloud < numberOfClouds; cloud++) {
            final int cloudOriginX = randomInt(width);
            final int cloudOriginY = randomInt(30) + 50;
            final int z = randomInt(5);
            for (int icloud = 0; icloud < cloudThickness; icloud++) { cloudPositions[0][cloud][icloud] = cloudOriginX + randomInt(cloudSpreadX) - cloudSpreadX/2; }
            for (int icloud = 0; icloud < cloudThickness; icloud++) { cloudPositions[1][cloud][icloud] = cloudOriginY + randomInt(cloudSpreadY) - cloudSpreadY/2; }
            for (int icloud = 0; icloud < cloudThickness; icloud++) { cloudPositions[2][cloud][icloud] = 100 + randomInt(50); }
            for (int icloud = 0; icloud < cloudThickness; icloud++) { cloudPositions[3][cloud][icloud] = 120 + randomInt(70); }
            for (int icloud = 0; icloud < cloudThickness; icloud++) { cloudPositions[4][cloud][icloud] = z; }
        }

        while (doDaylightCycle) {
            // Update Delta Time
            sleep(updateLength);
            dt += 1;

            // Values To Change (Animations Must Be Global)

            sunPositionX = (int)(Math.sin((dt + Math.PI * orbitSize * 2)/orbitSpeed) * -orbitSize * 1.15);
            sunPositionY = (int)(Math.cos((dt + Math.PI * orbitSize * 2)/orbitSpeed) * orbitSize);
            moonPositionX = (int)(Math.sin(dt/orbitSpeed) * -orbitSize * 1.15);
            moonPositionY = (int)(Math.cos(dt/orbitSpeed) * orbitSize);
            panel.repaint();
        }
    }
}
